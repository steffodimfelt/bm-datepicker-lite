import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class CalendarMonthsService {
    constructor() {
        this._yearAltered = 0;
        this.formatToWeekArray = (datesArray) => {
            let formatedArray = [];
            let skipDays = 0;
            for (let weekIndex = 0; weekIndex < datesArray.length / 7; weekIndex++) {
                formatedArray.push([]);
                for (let dayIndex = skipDays; dayIndex < skipDays + 7; dayIndex++) {
                    formatedArray[weekIndex].push(datesArray[dayIndex]);
                }
                skipDays = skipDays + 7;
            }
            return formatedArray;
        };
    }
    get currentMonth() {
        return this._currentMonth;
    }
    get selectedMonth() {
        return this._selectedMonth;
    }
    get selectedMonthName() {
        return this._monthLabels[this._selectedMonth];
    }
    get selectedMonthDays() {
        return new Date(this._selectedYear, this._selectedMonth, 0).getDate();
    }
    get emptyDaysAtBeginning() {
        let emptyDayArray = this._firstDayOfSelectedMonth.getDay() === 0
            ? [null, null, null, null, null, null]
            : [];
        for (let x = 1; x < this._firstDayOfSelectedMonth.getDay(); x++) {
            emptyDayArray.push(null);
        }
        return emptyDayArray;
    }
    get selectedMonthDaysArray() {
        let selectedMonthArray = new Date(this._selectedYear, this._selectedMonth, 1);
        let datesArray = this.emptyDaysAtBeginning;
        while (selectedMonthArray.getMonth() === this._selectedMonth) {
            datesArray.push(new Date(selectedMonthArray));
            selectedMonthArray.setDate(selectedMonthArray.getDate() + 1);
        }
        return this.formatToWeekArray(datesArray);
    }
    set month(date) {
        this._date = date;
        this._currentMonth = date.getMonth();
        this._selectedMonth = date.getMonth();
        this._selectedYear = date.getFullYear();
        this._monthLabels = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ];
        this._firstDayOfSelectedMonth = new Date(date.getFullYear(), date.getMonth(), 1);
        this._lastDayOfSelectedMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    }
    set monthLabels(monthLabels) {
        this._monthLabels = monthLabels;
    }
    firstDayOfSelectedMonth(selectedYear, selectedMonth) {
        this._firstDayOfSelectedMonth = new Date(selectedYear, selectedMonth, 1);
    }
    lastDayOfSelectedMonth(selectedYear, selectedMonth) {
        this._lastDayOfSelectedMonth = new Date(selectedYear, selectedMonth + 1, 0);
    }
    nextMonth() {
        this._selectedMonth =
            this._selectedMonth >= 11
                ? (this._selectedMonth = 0)
                : this._selectedMonth + 1;
    }
    previousMonth() {
        this._selectedMonth =
            this._selectedMonth === 0
                ? (this._selectedMonth = 11)
                : this._selectedMonth - 1;
    }
    set selectedMonth(monthValue) {
        this._selectedMonth = monthValue;
    }
    returnMonthDate(dayInfo) {
        return dayInfo.getMonth();
    }
}
CalendarMonthsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: CalendarMonthsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CalendarMonthsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: CalendarMonthsService, providedIn: 'platform' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: CalendarMonthsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'platform'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,